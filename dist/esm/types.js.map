{"version":3,"file":"types.js","names":[],"sources":["../../src/types.ts"],"sourcesContent":["import type {\n  CSSWithMultiValues,\n  RecursiveCSSObject,\n  ResponsiveObject,\n  SystemStyleObject,\n} from \"@chakra-ui/system\";\nimport type {\n  ClearIndicatorProps,\n  ContainerProps,\n  ControlProps,\n  DropdownIndicatorProps,\n  GroupBase,\n  GroupHeadingProps,\n  GroupProps,\n  IndicatorSeparatorProps,\n  IndicatorsContainerProps,\n  InputProps,\n  LoadingIndicatorProps,\n  MenuListProps,\n  MenuProps,\n  MultiValueProps,\n  NoticeProps,\n  OptionProps,\n  PlaceholderProps,\n  SingleValueProps,\n  ValueContainerProps,\n} from \"react-select\";\n\nexport interface SxProps extends CSSWithMultiValues {\n  _disabled?: CSSWithMultiValues;\n  _focus?: CSSWithMultiValues;\n}\n\nexport type ThemeObject = RecursiveCSSObject<SxProps>;\n\nexport interface SizeProps<PropType = string | number> {\n  sm: PropType;\n  md: PropType;\n  lg: PropType;\n}\n\nexport type Size = \"sm\" | \"md\" | \"lg\";\n\nexport type SizeProp = Size | ResponsiveObject<Size> | Size[];\n\nexport type TagVariant = \"subtle\" | \"solid\" | \"outline\" | (string & {});\n\nexport type SelectedOptionStyle = \"color\" | \"check\";\n\nexport type Variant =\n  | \"outline\"\n  | \"filled\"\n  | \"flushed\"\n  | \"unstyled\"\n  | (string & {});\n\nexport type StylesFunction<ComponentProps> = (\n  provided: SystemStyleObject,\n  state: ComponentProps\n) => SystemStyleObject;\n\nexport interface ChakraStylesConfig<\n  Option = unknown,\n  IsMulti extends boolean = boolean,\n  Group extends GroupBase<Option> = GroupBase<Option>\n> {\n  clearIndicator?: StylesFunction<ClearIndicatorProps<Option, IsMulti, Group>>;\n  container?: StylesFunction<ContainerProps<Option, IsMulti, Group>>;\n  control?: StylesFunction<ControlProps<Option, IsMulti, Group>>;\n  dropdownIndicator?: StylesFunction<\n    DropdownIndicatorProps<Option, IsMulti, Group>\n  >;\n  downChevron?: StylesFunction<DropdownIndicatorProps<Option, IsMulti, Group>>;\n  crossIcon?: StylesFunction<ClearIndicatorProps<Option, IsMulti, Group>>;\n  group?: StylesFunction<GroupProps<Option, IsMulti, Group>>;\n  groupHeading?: StylesFunction<GroupHeadingProps<Option, IsMulti, Group>>;\n  indicatorsContainer?: StylesFunction<\n    IndicatorsContainerProps<Option, IsMulti, Group>\n  >;\n  indicatorSeparator?: StylesFunction<\n    IndicatorSeparatorProps<Option, IsMulti, Group>\n  >;\n  input?: StylesFunction<InputProps<Option, IsMulti, Group>>;\n  inputContainer?: StylesFunction<InputProps<Option, IsMulti, Group>>;\n  loadingIndicator?: StylesFunction<\n    LoadingIndicatorProps<Option, IsMulti, Group>\n  >;\n  loadingMessage?: StylesFunction<NoticeProps<Option, IsMulti, Group>>;\n  menu?: StylesFunction<MenuProps<Option, IsMulti, Group>>;\n  menuList?: StylesFunction<MenuListProps<Option, IsMulti, Group>>;\n  multiValue?: StylesFunction<MultiValueProps<Option, IsMulti, Group>>;\n  multiValueLabel?: StylesFunction<MultiValueProps<Option, IsMulti, Group>>;\n  multiValueRemove?: StylesFunction<MultiValueProps<Option, IsMulti, Group>>;\n  noOptionsMessage?: StylesFunction<NoticeProps<Option, IsMulti, Group>>;\n  option?: StylesFunction<OptionProps<Option, IsMulti, Group>>;\n  placeholder?: StylesFunction<PlaceholderProps<Option, IsMulti, Group>>;\n  singleValue?: StylesFunction<SingleValueProps<Option, IsMulti, Group>>;\n  valueContainer?: StylesFunction<ValueContainerProps<Option, IsMulti, Group>>;\n}\n\nexport interface OptionBase {\n  variant?: string;\n  colorScheme?: string;\n  isFixed?: boolean;\n  isDisabled?: boolean;\n}\n"],"mappings":""}